Attribute VB_Name = "Base"

'
'--------------------------------------------------------------------------
'
'  Copyright (C) 1997-1999 Microsoft Corporation. All rights reserved.
'
'--------------------------------------------------------------------------
'
'This file plays the role of a base class
'from which "tree related functions" are "derived"
'

Option Explicit

'
'Notes:
'
'   - IMPORTANT: whenever you're done with inspecting Err.Number, call Err.Clear!
'   - also, whenever you're done with inspection Err.Number and you don't want
'   On Error Resume Next to be active, just call On Error GoTo 0
'
' - in "HubCalls" tree, we have the following node names (types):
'   (see CHTree_DisplayNode and LoadCallInterfaces)
'       - "ITCallHub"-s
'       - "ITCallInfo"-s - which are also called "participant calls"
'       - "ITBasicCallControl"-s
'       - "ITLegacyCallMediaControl"
'       - "ITStreamControl"
' - in "MonCalls" tree, we have the following node names (types):
'   (see MCTree_DisplayNode and LoadCallInterfaces)
'       - "ITAddress"-es
'       - "ITCallInfo"-s
'       - "ITBasicCallControl"-s
'       - "ITLegacyCallMediaControl"
'       - "ITStreamControl"
'

Public Const gszParticipantCall = "ITCallInfo"  'this is only for "HubCalls" tree
Public Const gszCallInfo = "ITCallInfo"         'this is only for "MonCalls" tree
Public Const gszCallControl = "ITBasicCallControl"                  'this is common for both "HubCalls" and "MonCalls" tree
Public Const gszLegacyCallMediaControl = "ITLegacyCallMediaControl" 'this is common for both "HubCalls" and "MonCalls" tree
Public Const gszStreamControl = "ITStreamControl"                   'this is common for both "HubCalls" and "MonCalls" tree

'
'Constants defined by tapi.h (tapi2.x), tapi3err.h (tapi3.0) or winerror.h
'for error codes:
'
'Note: all these constants are defined as VB constants in the file "tapi.txt", which
'you can find in the subdirectory ..\include that comes with the TAPI3 VB samples.
'If you use VB6.0, you can open the file tapi.txt using VB's tool "API Text Viewer";
'then you can use this tool to copy/paste constants in your code.
'

'tapi3err.h error codes
Public Const TAPI_E_INVALCALLSTATE = &H80040010
Public Const TAPI_E_NOTOWNER = &H80040023
Public Const TAPI_E_NOTSUPPORTED = &H80040003

'winerror.h error codes
'Public Const E_FAIL = &H80004005
'Public Const E_NOTIMPL = &H80000001

'VB errors
Public Const VB_E_ObjectDoesntSupportThisAction = &H1BD     'this is the error generated by VB when tapi3 returns E_NOTIMPL
Public Const VB_E_InvalidProcedureCallOrArgument = &H5      'this is the error generated by VB when tapi3 returns E_INVALIDARG

'other constants
Public Const TAPI3_ALL_TAPI_EVENTS = _
                                    TE_ACDGROUP Or _
                                    TE_ADDRESS Or _
                                    TE_AGENT Or _
                                    TE_AGENTHANDLER Or _
                                    TE_AGENTSESSION Or _
                                    TE_CALLHUB Or _
                                    TE_CALLINFOCHANGE Or _
                                    TE_CALLMEDIA Or _
                                    TE_CALLNOTIFICATION Or _
                                    TE_CALLSTATE Or _
                                    TE_DIGITEVENT Or _
                                    TE_GENERATEEVENT Or _
                                    TE_PRIVATE Or _
                                    TE_QOSEVENT Or _
                                    TE_QUEUE Or _
                                    TE_REQUEST Or _
                                    TE_TAPIOBJECT

'
'Recursive function:
'it removes first all children (it goes all the way in depth),
'then it removes the node itself
'
Public Function RemoveNode(tree As TreeView, treeCollData As Collection, nNodeIndex) As Long
    
    '
    'remove all children of the node
    '
    
    Do Until (tree.Nodes.Item(nNodeIndex).Children = 0)
        'remove 1st child
        Call RemoveNode(tree, treeCollData, tree.Nodes.Item(nNodeIndex).Child.Index)
    Loop

    '
    'remove node itself
    '
    
    Call RemoveLeaf(tree, treeCollData, nNodeIndex)
    
End Function

Public Function RemoveLeaf(tree As TreeView, treeCollData As Collection, nNodeIndex) As Long

    '
    'make sure that this is a leaf ;
    'if it has kids, those should be removed first!
    '
    If (tree.Nodes.Item(nNodeIndex).Children > 0) Then
        MsgBox ("ASSERT: this is not a leaf, it still has children!")
    End If

    'release its data
    'Set tree.Nodes.Item(nNodeIndex).Tag = Nothing      'doesn't work
    treeCollData.Remove (nNodeIndex)
    
    'remove the node from the tree
    tree.Nodes.Remove (nNodeIndex)
    
End Function

Public Function IsCallInTree( _
    tree As TreeView, _
    treeCollData As Collection, _
    objCallInfo As ITCallInfo) As Boolean
    
On Error Resume Next

    Dim nNodeIndex As Variant
    nNodeIndex = Empty
    
    '
    'search in tree the node that contains this call and remember its index
    '
    Dim objCrtCallInfo As ITCallInfo
    Dim nIndex As Long
    
    For nIndex = 1 To tree.Nodes.Count
        If tree.Nodes.Item(nIndex).Text = gszCallInfo Then
            'Set objCrtCallInfo = tree.Nodes.Item(nIndex).Tag   'doesn't work
            Set objCrtCallInfo = treeCollData.Item(nIndex)
            
            If objCrtCallInfo Is objCallInfo Then
                nNodeIndex = tree.Nodes.Item(nIndex).Index
                
                Set objCrtCallInfo = Nothing
                Exit For
            End If
            
            Set objCrtCallInfo = Nothing
        End If
    Next nIndex
    
    If IsEmpty(nNodeIndex) Then
        'didn't find node that contains this call
        IsCallInTree = False
        Exit Function
    End If
    
    IsCallInTree = True
    Exit Function
End Function
        
'
Public Function LoadCallInterfaces( _
    tree As TreeView, _
    treeCollData As Collection, _
    nParentNodeIndex, _
    objCallInfo As ITCallInfo) As Long
    
'
'We shall certainly get errors,
'because not all interfaces are available on a monitored call.
'Therefore we have to catch those errors
'
On Error Resume Next
    
    Dim objNewNode As Node

    '
    'query ITBasicCallControl
    '
    Dim objCallControl As ITBasicCallControl
    Set objCallControl = objCallInfo
    Err.Clear   'will always fail, since this is a monitoring app
    
    'create new node for this interface
    Set objNewNode = tree.Nodes.Add( _
        Relative:=nParentNodeIndex, _
        Relationship:=tvwChild, _
        Text:=gszCallControl)
    objNewNode.EnsureVisible
    
    'save a reference of Interface right in the node - ATTN: it can be Nothing!
    'Set objNewNode.Tag = objCallControl     'doesn't work
    If objNewNode.Index = 1 Then
        Call treeCollData.Add(Item:=objCallControl)        'it is the 1st node
    Else
        Call treeCollData.Add(Item:=objCallControl, after:=objNewNode.Index - 1)
    End If
    
    Set objNewNode = Nothing
    Set objCallControl = Nothing

    '
    'query ITLegacyCallMediaControl
    '
    Dim objLegacyCallMediaControl As ITLegacyCallMediaControl
    Set objLegacyCallMediaControl = objCallInfo
    Err.Clear   'should never fail
    
    'create new node for this interface
    Set objNewNode = tree.Nodes.Add( _
        Relative:=nParentNodeIndex, _
        Relationship:=tvwChild, _
        Text:=gszLegacyCallMediaControl)
    objNewNode.EnsureVisible
    
    'save a reference of Interface right in the node    - ATTN, can be Nothing
    'Set objNewNode.Tag = objLegacyCallMediaControl           'doesn't work
    If objNewNode.Index = 1 Then
        Call treeCollData.Add(Item:=objLegacyCallMediaControl)  'it is the 1st node
    Else
        Call treeCollData.Add(Item:=objLegacyCallMediaControl, after:=objNewNode.Index - 1)
    End If
    
    Set objNewNode = Nothing
    Set objLegacyCallMediaControl = Nothing

    '
    'query ITStreamControl
    '
    Dim objStreamControl As ITStreamControl
    Set objStreamControl = objCallInfo
    Err.Clear   'will always fail, since this is a monitoring app
    
    'create new node for this interface
    Set objNewNode = tree.Nodes.Add( _
        Relative:=nParentNodeIndex, _
        Relationship:=tvwChild, _
        Text:=gszStreamControl)
    objNewNode.EnsureVisible
    
    'save a reference of Interface right in the node    - ATTN, can be Nothing
    'Set objNewNode.Tag = objStreamControl           'doesn't work
    If objNewNode.Index = 1 Then
        Call treeCollData.Add(Item:=objStreamControl)  'it is the 1st node
    Else
        Call treeCollData.Add(Item:=objStreamControl, after:=objNewNode.Index - 1)
    End If
    
    Set objNewNode = Nothing
    Set objStreamControl = Nothing

End Function

'
Public Function DisplayCallInfo(objCallInfo As ITCallInfo, txtBox As TextBox) As Long
    
    Dim strText As String
    
    'Address                As ITAddress
    Dim objAddress As ITAddress
    Set objAddress = objCallInfo.Address
    
    strText = strText & "Parent Address Name = " & objAddress.AddressName
    strText = strText & Chr(13) & Chr(10)
    Set objAddress = Nothing
    
    'CallState              As CALL_STATE
    strText = strText & "CallState = " & TranslateCallState(objCallInfo.CallState)
    strText = strText & Chr(13) & Chr(10)
    
    'Privilege              As CALL_PRIVILEGE
    strText = strText & "Privilege = " & TranslatePrivilege(objCallInfo.Privilege)
    strText = strText & Chr(13) & Chr(10)
    
    '
    'Note: some of the following might fail, because they are not all
    'supported by the underlying TSP; so we must catch exceptions
    '
    On Error Resume Next
    
    'CalledIDAddressType
    Dim lCalledIDAddressType As Long
    lCalledIDAddressType = objCallInfo.CallInfoLong(CIL_CALLEDIDADDRESSTYPE)
'    lAddressType = objCallInfo.CallInfoLong(CIL_CALLERIDADDRESSTYPE)
'    lAddressType = objCallInfo.CallInfoLong(CIL_CONNECTEDIDADDRESSTYPE)
'    lAddressType = objCallInfo.CallInfoLong(CIL_REDIRECTINGIDADDRESSTYPE)
'    lAddressType = objCallInfo.CallInfoLong(CIL_REDIRECTIONIDADDRESSTYPE)
    
    If Err.Number = 0 Then
        strText = strText & "lCalledIDAddressType = 0x" & Hex(lCalledIDAddressType)
    Else
        strText = strText & "lCalledIDAddressType = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'AppSpecific
    Dim lAppSpecific As Long
    lAppSpecific = objCallInfo.CallInfoLong(CIL_APPSPECIFIC)
    
    If Err.Number = 0 Then
        strText = strText & "lAppSpecific = 0x" & Hex(lAppSpecific)
    Else
        strText = strText & "lAppSpecific = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'BearerMode
    Dim lBearerMode As Long
    lBearerMode = objCallInfo.CallInfoLong(CIL_BEARERMODE)
    
    If Err.Number = 0 Then
        strText = strText & "lBearerMode = 0x" & Hex(lBearerMode)
    Else
        strText = strText & "lBearerMode = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CallDataBuffer
    Dim vCallDataBuffer As Variant      'contains array of bytes; try print it as string
    vCallDataBuffer = objCallInfo.CallInfoBuffer(CIB_CALLDATABUFFER)
    
    If Err.Number = 0 Then
        strText = strText & "vCallDataBuffer = <" & vCallDataBuffer & ">"
    Else
        strText = strText & "vCallDataBuffer = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CalledIDName
    Dim strCalledIDName As String
    strCalledIDName = objCallInfo.CallInfoString(CIS_CALLEDIDNAME)
    
    If Err.Number = 0 Then
        strText = strText & "strCalledIDName = <" & strCalledIDName & ">"
    Else
        strText = strText & "strCalledIDName = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CalledIDNumber
    Dim strCalledIDNumber As String
    strCalledIDNumber = objCallInfo.CallInfoString(CIS_CALLEDIDNUMBER)
    
    If Err.Number = 0 Then
        strText = strText & "strCalledIDNumber = <" & strCalledIDNumber & ">"
    Else
        strText = strText & "strCalledIDNumber = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CalledPartyFriendlyName
    Dim strCalledPartyFriendlyName As String
    strCalledPartyFriendlyName = objCallInfo.CallInfoString(CIS_CALLEDPARTYFRIENDLYNAME)
    
    If Err.Number = 0 Then
        strText = strText & "strCalledPartyFriendlyName = <" & strCalledPartyFriendlyName & ">"
    Else
        strText = strText & "strCalledPartyFriendlyName = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CallerIDName
    Dim strCallerIDName As String
    strCallerIDName = objCallInfo.CallInfoString(CIS_CALLERIDNAME)
    
    If Err.Number = 0 Then
        strText = strText & "strCallerIDName = <" & strCallerIDName & ">"
    Else
        strText = strText & "strCallerIDName = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CallerIDNumber
    Dim strCallerIDNumber As String
    strCallerIDNumber = objCallInfo.CallInfoString(CIS_CALLERIDNUMBER)
    
    If Err.Number = 0 Then
        strText = strText & "strCallerIDNumber = <" & strCallerIDNumber & ">"
    Else
        strText = strText & "strCallerIDNumber = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CallHub
    Dim objCallHub As ITCallHub
    Set objCallHub = objCallInfo.CallHub
    
    If Err.Number = 0 Then
        If objCallHub Is Nothing Then
            strText = strText & "objCallHub = Nothing"
        Else
            strText = strText & "objCallHub != Nothing"
            strText = strText & ", objCallHub.NumCalls = " & objCallHub.NumCalls
            Set objCallHub = Nothing
        End If
    Else
        strText = strText & "objCallHub = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CallingPartyID
    Dim strCallingPartyID As String
    strCallingPartyID = objCallInfo.CallInfoString(CIS_CALLINGPARTYID)
    
    If Err.Number = 0 Then
        strText = strText & "strCallingPartyID = <" & strCallingPartyID & ">"
    Else
        strText = strText & "strCallingPartyID = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'CallState              As CALL_STATE
    'already printed - see the top of this function
    
    'CallTreatment
    Dim lCallTreatment As Long
    lCallTreatment = objCallInfo.CallInfoLong(CIL_CALLTREATMENT)
    
    If Err.Number = 0 Then
        strText = strText & "lCallTreatment = 0x" & Hex(lCallTreatment)
    Else
        strText = strText & "lCallTreatment = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'Comment
    Dim strComment As String
    strComment = objCallInfo.CallInfoString(CIS_COMMENT)
    
    If Err.Number = 0 Then
        strText = strText & "strComment = <" & strComment & ">"
    Else
        strText = strText & "strComment = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'ConnectedIDName
    Dim strConnectedIDName As String
    strConnectedIDName = objCallInfo.CallInfoString(CIS_CONNECTEDIDNAME)
    
    If Err.Number = 0 Then
        strText = strText & "strConnectedIDName = <" & strConnectedIDName & ">"
    Else
        strText = strText & "strConnectedIDName = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'ConnectedIDNumber
    Dim strConnectedIDNumber As String
    strConnectedIDNumber = objCallInfo.CallInfoString(CIS_CONNECTEDIDNUMBER)
    
    If Err.Number = 0 Then
        strText = strText & "strConnectedIDNumber = <" & strConnectedIDNumber & ">"
    Else
        strText = strText & "strConnectedIDNumber = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'DevSpecificBuffer
    Dim vDevSpecificBuffer As Variant   'contains array of bytes; try print it as string
    vDevSpecificBuffer = objCallInfo.CallInfoBuffer(CIB_DEVSPECIFICBUFFER)
    
    If Err.Number = 0 Then
        strText = strText & "vDevSpecificBuffer = <" & vDevSpecificBuffer & ">"
    Else
        strText = strText & "vDevSpecificBuffer = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'DisplayableAddress
    Dim strDisplayableAddress As String
    strDisplayableAddress = objCallInfo.CallInfoString(CIS_DISPLAYABLEADDRESS)
    
    If Err.Number = 0 Then
        strText = strText & "strDisplayableAddress = <" & strDisplayableAddress & ">"
    Else
        strText = strText & "strDisplayableAddress = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'MaxRate
    Dim lMaxRate As Long
    lMaxRate = objCallInfo.CallInfoLong(CIL_MAXRATE)
    
    If Err.Number = 0 Then
        strText = strText & "lMaxRate = 0x" & Hex(lMaxRate)
    Else
        strText = strText & "lMaxRate = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'MediaTypesAvailable
    Dim lMediaTypesAvailable As Long
    lMediaTypesAvailable = objCallInfo.CallInfoLong(CIL_MEDIATYPESAVAILABLE)
    
    If Err.Number = 0 Then
        strText = strText & "lMediaTypesAvailable = 0x" & Hex(lMediaTypesAvailable)
    Else
        strText = strText & "lMediaTypesAvailable = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'MinRate
    Dim lMinRate As Long
    lMinRate = objCallInfo.CallInfoLong(CIL_MINRATE)
    
    If Err.Number = 0 Then
        strText = strText & "lMinRate = 0x" & Hex(lMinRate)
    Else
        strText = strText & "lMinRate = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'Origin
    Dim lOrigin As Long
    lOrigin = objCallInfo.CallInfoLong(CIL_ORIGIN)
    
    If Err.Number = 0 Then
        strText = strText & "lOrigin = 0x" & Hex(lOrigin)
    Else
        strText = strText & "lOrigin = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'Privilege              As CALL_PRIVILEGE
    'already printed - see the top of this function
    
    'Reason
    Dim lReason As Long
    lReason = objCallInfo.CallInfoLong(CIL_REASON)
    
    If Err.Number = 0 Then
        strText = strText & "lReason = 0x" & Hex(lReason)
    Else
        strText = strText & "lReason = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'RedirectingIDName
    Dim strRedirectingIDName As String
    strRedirectingIDName = objCallInfo.CallInfoString(CIS_REDIRECTINGIDNAME)
    
    If Err.Number = 0 Then
        strText = strText & "strRedirectingIDName = <" & strRedirectingIDName & ">"
    Else
        strText = strText & "strRedirectingIDName = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'RedirectingIDNumber
    Dim strRedirectingIDNumber As String
    strRedirectingIDNumber = objCallInfo.CallInfoString(CIS_REDIRECTINGIDNUMBER)
    
    If Err.Number = 0 Then
        strText = strText & "strRedirectingIDNumber = <" & strRedirectingIDNumber & ">"
    Else
        strText = strText & "strRedirectingIDNumber = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'RedirectionIDName
    Dim strRedirectionIDName As String
    strRedirectionIDName = objCallInfo.CallInfoString(CIS_REDIRECTIONIDNAME)
    
    If Err.Number = 0 Then
        strText = strText & "strRedirectionIDName = <" & strRedirectionIDName & ">"
    Else
        strText = strText & "strRedirectionIDName = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'RedirectionIDNumber
    Dim strRedirectionIDNumber As String
    strRedirectionIDNumber = objCallInfo.CallInfoString(CIS_REDIRECTIONIDNUMBER)
    
    If Err.Number = 0 Then
        strText = strText & "strRedirectionIDNumber = <" & strRedirectionIDNumber & ">"
    Else
        strText = strText & "strRedirectionIDNumber = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    'ReleaseUserUserInfo    - it should always fail when called for "monitored" call
    Call objCallInfo.ReleaseUserUserInfo
    strText = strText & "ReleaseUserUserInfo returned Err.Number = " & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    If Err.Number = 0 Then
        MsgBox ("TAPI3 ERROR: ReleaseUserUserInfo should fail for 'monitored' calls!")
    Else
        Err.Clear
    End If
    
    '
    'SetCallParamsFlags     - this sets LINECALLPARAMFLAGS_ flags
    'Note: calling this function doesn't mean much for a monitored call,
    'however it shouldn't fail with anything else but TAPI_E_INVALCALLSTATE.
    
    objCallInfo.CallInfoLong(CIL_CALLPARAMSFLAGS) = 0   'Call objCallInfo.SetCallParamsFlags(0)
    
    strText = strText & "SetCallParamsFlags returned Err.Number = " & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    If Err.Number <> 0 And Err.Number <> TAPI_E_INVALCALLSTATE Then
        MsgBox ("TAPI3 ERROR: SetCallParamsFlags failed with unexpected err.number!")
    Else
        Err.Clear
    End If
    
    'UserUserInfo
    Dim vUserUserInfo As Variant      'contains array of bytes; try print it as string
    vUserUserInfo = objCallInfo.CallInfoBuffer(CIB_USERUSERINFO)
    
    If Err.Number = 0 Then
        strText = strText & "vUserUserInfo = <" & vUserUserInfo & ">"
    Else
        strText = strText & "vUserUserInfo = error = 0x" & Hex(Err.Number)
        Err.Clear
    End If
    strText = strText & Chr(13) & Chr(10)
    
    txtBox.Text = strText
    txtBox.Refresh
    
End Function

'
Public Function DisplayCallControl( _
    objCallControl As ITBasicCallControl, _
    txtBox As TextBox) As Long
    
    'if we got here, then QueryInterface worked
    Dim strText As String
    strText = "Available"
    
    txtBox.Text = strText
    txtBox.Refresh
End Function

'
Public Function DisplayLegacyCallMediaControl( _
    objLegacyCallMediaControl As ITLegacyCallMediaControl, _
    txtBox As TextBox) As Long
    
    'if we got here, then QueryInterface worked
    Dim strText As String
    strText = "Available"
    strText = strText & Chr(13) & Chr(10)
    
    'let's call the methods - some of these calls will fail, so catch the errors
    On Error Resume Next
    
    '
    'Call DetectDigits with different input values
    '
    Dim lDigitModes As Long
    
    lDigitModes = 0     'this should succeed for h323, voice modems, dialogic, etc
    Call objLegacyCallMediaControl.DetectDigits(lDigitModes)
    strText = strText & _
        "DetectDigits(0) returned 0x" & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    Err.Clear
    
    lDigitModes = LINEDIGITMODE_PULSE  'this should fail for most providers with TAPI_E_INVALMODE (0x8004001F); Dialogic might support this though.
    Call objLegacyCallMediaControl.DetectDigits(lDigitModes)
    strText = strText & _
        "DetectDigits(LINEDIGITMODE_PULSE) returned 0x" & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    Err.Clear
    
    'Note:
    'after calling DetectDigits successfuly, the app should be notified about DTMFs
    lDigitModes = LINEDIGITMODE_DTMF    'this should succeed for h323, voice modems, dialogic, etc
    Call objLegacyCallMediaControl.DetectDigits(lDigitModes)
    strText = strText & _
        "DetectDigits(LINEDIGITMODE_DTMF) " & _
        "returned 0x" & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    Err.Clear
    
    'Note:
    'after calling DetectDigits successfuly, the app should be notified about DTMFs
    lDigitModes = LINEDIGITMODE_DTMFEND  'this should succeed for voice modems, dialogic, etc
    Call objLegacyCallMediaControl.DetectDigits(lDigitModes)
    strText = strText & _
        "DetectDigits(LINEDIGITMODE_DTMFEND) " & _
        "returned 0x" & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    Err.Clear
    
    'Note:
    'after calling DetectDigits successfuly, the app should be notified about DTMFs
    lDigitModes = LINEDIGITMODE_DTMF Or LINEDIGITMODE_DTMFEND 'this should succeed for voice modems, dialogic, etc
    Call objLegacyCallMediaControl.DetectDigits(lDigitModes)
    strText = strText & _
        "DetectDigits(LINEDIGITMODE_DTMF | LINEDIGITMODE_DTMFEND) " & _
        "returned 0x" & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    Err.Clear
    
    '
    'Call GenerateDigits with different input values;
    'all calls should fail, because the call not "owned" by this monitoring app;
    'they should fail with TAPI_E_NOTOWNER (0x80040023)
    '
    Dim lDigitMode As Long, strDigits As String
    
    lDigitMode = LINEDIGITMODE_DTMF 'correct value
    strDigits = "123"               'correct value
    Call objLegacyCallMediaControl.GenerateDigits(strDigits, lDigitMode)
    If Err.Number = TAPI_E_NOTOWNER Then
        strText = strText & _
            "GenerateDigits(LINEDIGITMODE_DTMF, '123') " & _
            "returned TAPI_E_NOTOWNER" & _
            " - failure expected"
        strText = strText & Chr(13) & Chr(10)
    Else
        strText = strText & _
            "GenerateDigits(LINEDIGITMODE_DTMF, '123') " & _
            "returned 0x" & Hex(Err.Number) & _
            " - this error code not expected!"
        strText = strText & Chr(13) & Chr(10)
    End If
    Err.Clear
    
    lDigitMode = LINEDIGITMODE_DTMF 'correct value
    strDigits = vbNullString        'correct value
    Call objLegacyCallMediaControl.GenerateDigits(strDigits, lDigitMode)
    If Err.Number = TAPI_E_NOTOWNER Then
        strText = strText & _
            "GenerateDigits(LINEDIGITMODE_DTMF, NULL) " & _
            "returned TAPI_E_NOTOWNER" & _
            " - failure expected"
        strText = strText & Chr(13) & Chr(10)
    Else
        strText = strText & _
            "GenerateDigits(LINEDIGITMODE_DTMF, NULL) " & _
            "returned 0x" & Hex(Err.Number) & _
            " - this error code not expected!"
        strText = strText & Chr(13) & Chr(10)
    End If
    Err.Clear
    
    lDigitMode = LINEDIGITMODE_DTMF Or LINEDIGITMODE_DTMFEND 'incorrect value
    strDigits = "~asdm%^"                                    'incorrect value
    Call objLegacyCallMediaControl.GenerateDigits(strDigits, lDigitMode)
    If Err.Number = TAPI_E_NOTOWNER Then
        strText = strText & _
            "GenerateDigits(LINEDIGITMODE_DTMF | LINEDIGITMODE_DTMFEND, '~asdm%^') " & _
            "returned TAPI_E_NOTOWNER" & _
            " - failure expected"
        strText = strText & Chr(13) & Chr(10)
    Else
        strText = strText & _
            "GenerateDigits(LINEDIGITMODE_DTMF | LINEDIGITMODE_DTMFEND, '~asdm%^') " & _
            "returned 0x" & Hex(Err.Number) & _
            " - this error code not expected!"
        strText = strText & Chr(13) & Chr(10)
    End If
    Err.Clear
    
    '
    'Call MonitorMedia
    'the error (success/failure) returned by this function is TSP dependent,
    'so it will actually fail or succeed depending on the TSP.
    'Some TSP-s might not even implement this function.
    '
    Dim lMediaType As Long
    
    lMediaType = 0
    Call objLegacyCallMediaControl.MonitorMedia(lMediaType)
    strText = strText & _
        "MonitorMedia(0) " & _
        "returned 0x" & Hex(Err.Number)
    strText = strText & Chr(13) & Chr(10)
    Err.Clear
    
    '
    'Call SetMediaType
    'it should fail with "TAPI_E_NOTOWNER"
    '
    
    lMediaType = 0
    Call objLegacyCallMediaControl.SetMediaType(lMediaType)
    If Err.Number = TAPI_E_NOTOWNER Then
        strText = strText & _
            "SetMediaType(0) " & _
            "returned TAPI_E_NOTOWNER" & _
            " - this failure expected"
        strText = strText & Chr(13) & Chr(10)
    Else
        strText = strText & _
            "SetMediaType(0) " & _
            "returned 0x" & Hex(Err.Number) & _
            " - this error code not expected (it should return TAPI_E_NOTOWNER)!"
        strText = strText & Chr(13) & Chr(10)
    End If
    Err.Clear
    
    '
    'Done: display + refresh
    '
    
    txtBox.Text = strText
    txtBox.Refresh
End Function

'
Public Function DisplayStreamControl( _
    objStreamControl As ITStreamControl, _
    txtBox As TextBox) As Long
    
    'if we got here, then QueryInterface worked
    Dim strText As String
    strText = "Available"
    
    txtBox.Text = strText
    txtBox.Refresh
End Function
