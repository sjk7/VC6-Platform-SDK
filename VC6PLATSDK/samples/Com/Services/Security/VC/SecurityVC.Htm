<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
	<TITLE>Security VC</TITLE>
</HEAD>


<STYLE TYPE="text/css">
<!--
  A:link {text-decoration: none;
	font: 10pt Verdana, Arial, Helvetica;
	font-weight: bold;
	color: #003399}
  A:visited {text-decoration: none;
	font: 10pt Verdana, Arial, Helvetica;
	font-weight: bold;
	color: #0080ff}
BODY { 
     font-family: Verdana, Arial, Helvetica;
    line-height: 1;
    color: #000000; 
    font-size:  9pt;
	
  H1, H2, H3, H4, H5, H6, P, UL, OL, DIR, MENU, DIV, 
  DT, DD, ADDRESS, BLOCKQUOTE, PRE, BR { display: block }

  B, STRONG, I, EM, CITE, VAR, TT, CODE, KBD, SAMP, 
  IMG, SPAN { display: inline }
	
  H1, H2, H3, H4 { margin-top: 1em; margin-bottom: 1em }
  H5, H6 { margin-top: 1em }
  H1 { text-align: center }
  H1, H2, H4, H6 { font-weight: bold }
  H3, H5 { font-style: italic }

  H1 { font-size: xx-large }
  H2 { font-size: x-large }
  H3 { font-size: large }
	
  }
-->
</STYLE>


<BODY BGCOLOR="#ffffff" TOPMARGIN="20" LEFTMARGIN="10">

<h2>Security VC</h2>


<PRE>
<CODE>

// VCSecuritySampleClass.cpp : Implementation of CVCSecuritySampleClass
#include "stdafx.h"
#include "VCSecuritySample.h"
#include "VCSecuritySampleClass.h"
#include <comsvcs.h>

/////////////////////////////////////////////////////////////////////////////
// CVCSecuritySampleClass

STDMETHODIMP CVCSecuritySampleClass::AmIAnAdministrator(short * retval)
{
IObjectContext * pObjCtx;
HRESULT hr;
int fIsInRole;


hr = CoGetObjectContext(IID_IObjectContext, (void**)&pObjCtx);
if(FAILED(hr))
{
	*retval = 2;
	return S_OK;
}

if(NULL == pObjCtx)
{
    //Return Error Code
	*retval = 2;
	return S_OK;
}

if(!pObjCtx->IsSecurityEnabled())
{
    //Return Error Code
	*retval = 2;
	return S_OK;
}

BSTR strAdminRole = SysAllocString(L"Administrator");
hr = pObjCtx->IsCallerInRole(strAdminRole, &fIsInRole);
SysFreeString(strAdminRole);

//An error will be caused if the Administrator role does
//not exist.
if(CONTEXT_E_ROLENOTFOUND == hr)
{
	*retval = 0;
	return S_OK;
}

if(FAILED(hr))
{
	*retval = 2;
	return S_OK;
}

if (fIsInRole) 
	*retval = 1;
else
	*retval = 0;

return S_OK;

}


STDMETHODIMP CVCSecuritySampleClass::WhoAmI(BSTR * retval)
{
IObjectContext * pIObjCtx = NULL;
ISecurityProperty* pISecurityProperty = NULL;
DWORD			cbDomain = 20;
DWORD			cbUserName = 20 ;
OLECHAR			lpwstrDomain[20 + 20 + 2] = _T("");
OLECHAR			lpwstrUserName[20] = _T("");
PSID			pSID = NULL;
SID_NAME_USE	peUse;


if(FAILED(CoGetObjectContext(IID_IObjectContext, (void**)&pIObjCtx)))
	goto error;

if(NULL == pIObjCtx)
	goto error;

if(!pIObjCtx->IsSecurityEnabled())
	goto error;

if(FAILED(pIObjCtx->QueryInterface(IID_ISecurityProperty,
	(void**)&pISecurityProperty)))
	goto error;

if(FAILED(pISecurityProperty->GetDirectCallerSID(&pSID)))
	goto error;

if(!LookupAccountSid(NULL, pSID,lpwstrUserName,&cbUserName, 
	lpwstrDomain, &cbDomain, &peUse))
	goto error;
			
if((!cbDomain) || (!cbUserName))
	goto error;

_tcscat(lpwstrDomain, _T("\\"));
_tcscat(lpwstrDomain, lpwstrUserName);
*retval = SysAllocString(lpwstrDomain);
goto cleanup;

error:
*retval = SysAllocString(L"");
goto cleanup;

cleanup:
if(pSID)
	pISecurityProperty->ReleaseSID(pSID);
if(pIObjCtx)
	pIObjCtx->Release();
if(pISecurityProperty)
	pISecurityProperty->Release();
return S_OK;
}




</CODE>
</PRE>

<HR>
<CENTER>
<FONT FACE="VERDANA,ARIAL,HELVETICA" size=1>
&copy; 1997 Microsoft Corporation. All rights reserved. 
</FONT>
</CENTER>

</BODY>
</HTML>
