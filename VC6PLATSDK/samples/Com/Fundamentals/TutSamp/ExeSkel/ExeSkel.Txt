
EXESKEL - Win32 EXE Skeleton


SUMMARY
=======

The EXESKEL sample introduces the basic application skeleton that can be
used as a point of departure for more complex Win32 applications. It is
used as a base for the COM Tutorial series of code samples. Of particular
interest in this code sample is the support for initializing and
uninitializing the COM Libraries. The general use of APPUTIL to construct
this application is also worthy of study.

For functional descriptions and a tutorial code tour of EXESKEL, see the
Code Tour section in EXESKEL.HTM. For details on the external user
operation of EXESKEL, see both the Usage and Operation sections in
EXESKEL.HTM. To read EXESKEL.HTM, run TUTORIAL.EXE in the main tutorial
directory and click the EXESKEL lesson in the table of lessons. You can
also achieve the same thing by clicking the EXESKEL.HTM file after
locating the main tutorial directory in the Windows Explorer.

In general, to set up your system to build and test the code samples in
this ActiveX Tutorial series, see TUTORIAL.HTM for details. The
accompanying makefile is Microsoft NMAKE-compatible. To create a debug
build of EXESKEL, issue the NMAKE command at the command prompt.

For convenient use in Microsoft's Visual Studio, a project file is
provided for each sample. To load the project for the EXESKEL sample,
you can run Visual Studio at the Command Prompt in the sample's directory
as follows:

    MSDEV EXESKEL.DSP

You can also simply double-click the .DSP file in the Windows Explorer to
load a sample's project into Visual Studio. From within Visual
Studio you can then browse the C++ classes of the sample source and
generally perform the other edit-compile-debug operations. Note that, as
part of the Platform SDK, the compilation of these samples from within
Visual Studio requires the proper setting of directory paths in
Visual Studio. For more details, see the Building the Code Samples
section in USING.HTM.

Usage
-----

EXESKEL is an .EXE file that you can execute directly from Windows or from
the command prompt. No command line arguments are recognized by EXESKEL.


FILES
=====

Files          Description

EXESKEL.TXT    This file.
MAKEFILE       The generic makefile for building the code sample
               application of this tutorial lesson.
EXESKEL.H      The include file for the EXESKEL application. Contains
               class declarations, function prototypes, and resource
               identifiers.
EXESKEL.CPP    The main implementation file for EXESKEL.EXE. Has WinMain
               and CMainWindow implementation.
EXESKEL.RC     The application resource definition file.
EXESKEL.ICO    The application icon resource.
EXESKEL.DSP    Microsoft Visual Studio Project file.

EXESKEL is meant to be a generic point of departure for building Win32 C++
EXE applications that support COM/OLE. It is the basic skeleton that is
built upon in subsequent code samples in this tutorial series. You can
study the code comments to learn more about this C++ application skeleton.
