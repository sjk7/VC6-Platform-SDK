// Data.idl : IDL source for Data.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (Data.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include <mtxattr.h>

#if (__midl >= 503)
midl_pragma warning( disable: 2400 ) // Happy to be delivered NULLs for optional parameters
#endif

[
	uuid(B9F881E5-0063-433A-AD7F-2ED2CA579305),
	version(1.0),
	helpstring("DataServices 1.0 Type Library")
]
library DataServices
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
	importlib("c:\Program Files\Common Files\System\ado\msado15.dll");

    typedef enum {
        colEditNone = 0,
        colEditInProgress = 1,
        colEditAdd = 2,
        colEditDelete = 4,
        colEditDeleted = 8
    } ColEditModeEnum;

	[
		object,
		uuid(A008E1F2-E559-4349-B01D-DF1E6F69D3B4),
		dual,
		helpstring("IEntityData Interface"),
		pointer_default(unique)
	]
	interface IEntityData : IDispatch
	{
		[id(8), helpstring("Given an index, returns an item in the structure.")]
		HRESULT _stdcall Item(
						[in] VARIANT* Index, 
						[out, retval] VARIANT* pvarRet);

		[id(0x00000001), helpstring("Adds an item to the structure.")]
		HRESULT _stdcall Add(
						[in] VARIANT* Item, 
						[in, optional] VARIANT* Key, 
						[in, optional] VARIANT* Before, 
						[in, optional] VARIANT* After);
		[id(0x00000002), helpstring("Returns number of items in structure.")]
		HRESULT _stdcall Count([out, retval] long* pi4);
		[id(0x00000003), helpstring("Removes an item to the structure.")]
		HRESULT _stdcall Remove([in] VARIANT* Index);
		[id(DISPID_NEWENUM)]
		HRESULT _stdcall _NewEnum([out, retval] IUnknown** ppunk);
		[id(4), helpstring("Initialize the structure to a given size.")] HRESULT Initialize(long Size);
		[propget, id(5), helpstring("The EditMode represents the current state of the entity data.")] HRESULT EditMode([out, retval] ColEditModeEnum *pVal);
		[propput, id(5), helpstring("The EditMode represents the current state of the entity data.")] HRESULT EditMode([in] ColEditModeEnum newVal);
		[propget, id(6), helpstring("The name of a field in the entity.")] HRESULT Key(long Index, [out, retval] BSTR *pVal);
		[propput, id(6), helpstring("The name of a field in the entity.")] HRESULT Key(long Index, [in] BSTR newVal);
		[id(7), helpstring("Insert a metadata item into the entity.")] HRESULT Insert([in] long Index, [in] BSTR Key, [in] VARIANT *pVal);
		[propget, id(DISPID_VALUE), helpstring("Entity Data Item")] HRESULT Field([in] VARIANT *Index, [out, retval] VARIANT *pVal);
		[propput, id(DISPID_VALUE), helpstring("Entity Data Item")] HRESULT Field([in] VARIANT *Index, [in] VARIANT *pVal);
		[propput, id(9), helpstring("Assign an ADO record to an entity")] HRESULT Recordset([in] _Recordset* newVal);
		[propget, id(10), helpstring("Retrieve the internal UpdateCommand for this entity")] HRESULT UpdateCommand([out, retval] BSTR *pVal);
		[propget, id(11), helpstring("Retrieve the internal ReadCommand for this entity")] HRESULT ReadCommand([out, retval] BSTR *pVal);
		[propget, id(12), helpstring("Stored procedure used for storing entity data to the database")] HRESULT UpdateStoredProcedure([out, retval] BSTR *pVal);
		[propput, id(12), helpstring("Stored procedure used for storing entity data to the database")] HRESULT UpdateStoredProcedure([in] BSTR newVal);
		[propget, id(13), helpstring("Stored procedure used for reading an entity from the database")] HRESULT ReadStoredProcedure([out, retval] BSTR *pVal);
		[propput, id(13), helpstring("Stored procedure used for reading an entity from the database")] HRESULT ReadStoredProcedure([in] BSTR newVal);
		[propget, id(14), helpstring("The database primary key field for this entity")] HRESULT KeyField([out, retval] BSTR *pVal);
		[propput, id(14), helpstring("The database primary key field for this entity")] HRESULT KeyField([in] BSTR newVal);
		[id(15), helpstring("Append and item to the entity.")] HRESULT Append(VARIANT *pItem, VARIANT *pKey);
		[propget, id(16), helpstring("Stored procedure used for deleting an entity from the database")] HRESULT DeleteStoredProcedure([out, retval] BSTR *pVal);
		[propput, id(16), helpstring("Stored procedure used for deleting an entity from the database")] HRESULT DeleteStoredProcedure([in] BSTR newVal);
		[propget, id(17), helpstring("Retrieve the internal DeleteCommand for this entity")] HRESULT DeleteCommand([out, retval] BSTR *pVal);
		[propget, id(18), helpstring("Stored procedure used for inserting an entity into the database")] HRESULT InsertStoredProcedure([out, retval] BSTR *pVal);
		[propput, id(18), helpstring("Stored procedure used for inserting an entity into the database")] HRESULT InsertStoredProcedure([in] BSTR newVal);
		[propget, id(19), helpstring("Retrieve the internal InsertCommand for this entity")] HRESULT InsertCommand([out, retval] BSTR *pVal);
	};

	[
		object,
		uuid(99F2DD53-A1C2-4878-AF80-4A30EDEA8288),
		dual,
		helpstring("IDynamic Interface"),
		pointer_default(unique)
	]
	interface IDynamic : IDispatch
	{
		[id(DISPID_VALUE), helpstring("Given an index, returns an item in the collection.")]
		HRESULT _stdcall Item(
						[in] VARIANT* Index, 
						[out, retval] VARIANT* pvarRet);

		[id(0x00000001), helpstring("Adds an item to the collection.")]
		HRESULT _stdcall Add(
						[in] VARIANT* Item, 
						[in, optional] VARIANT* Key, 
						[in, optional] VARIANT* Before, 
						[in, optional] VARIANT* After);
		[id(0x00000002), helpstring("Returns number of items in collection.")]
		HRESULT _stdcall Count([out, retval] long* pi4);
		[id(0x00000003), helpstring("Removes an item to the collection.")]
		HRESULT _stdcall Remove([in] VARIANT* Index);
		[id(DISPID_NEWENUM)]
		HRESULT _stdcall _NewEnum([out, retval] IUnknown** ppunk);
	};

	[
		object,
		uuid(A008E1F1-E559-4349-B01D-DF1E6F69D3B4),
		dual,
		helpstring("IEntity Interface"),
		pointer_default(unique)
	]
	interface IEntity : IDispatch
	{
		[id(7), helpstring("Given an index, returns an item in the structure.")]
		HRESULT _stdcall Item(
						[in] VARIANT* Index, 
						[out, retval] VARIANT* pvarRet);

		[id(0x00000002), helpstring("Returns number of items in structure.")] HRESULT _stdcall Count([out, retval] long* pi4);
		[id(DISPID_NEWENUM)] HRESULT _stdcall _NewEnum([out, retval] IUnknown** ppunk);
		[propget, id(5), helpstring("The EditMode represents the current state of the entity data.")] HRESULT EditMode([out, retval] ColEditModeEnum *pVal);
		[propget, id(6), helpstring("The name of a field in the entity.")] HRESULT Key(long Index, [out, retval] BSTR *pVal);
		[propget, id(DISPID_VALUE), helpstring("Entity Data Item")] HRESULT Field([in] VARIANT* Index, [out, retval] VARIANT *pVal);
		[propput, id(DISPID_VALUE), helpstring("Entity Data Item")] HRESULT Field([in] VARIANT* Index, [in] VARIANT *newVal);
		[propput, id(8), helpstring("Assign an ADO record to an entity")] HRESULT Recordset([in] _Recordset* newVal);
	};

	[
		object,
		uuid(A497E6A9-95E6-4EAE-BD82-6E2D67306172),
		dual,
		helpstring("IResultset Interface"),
		pointer_default(unique)
	]
	interface IResultset : IDispatch
	{
		[propget, id(DISPID_VALUE), helpstring("Given an index, returns an item in the resultset.")] HRESULT Record(long nIndex, [out, retval] IEntityData **pVal);
		[id(0x00000002), helpstring("Returns number of items in resultset.")] HRESULT _stdcall Count([out, retval] long* pi4);
		[id(DISPID_NEWENUM)] HRESULT _stdcall _NewEnum([out, retval] IUnknown** ppunk);
	};

	[
		object,
		uuid(0851A589-A57B-42EB-8124-45A1C5A0AF24),
		dual,
		helpstring("IDataProxy Interface"),
		pointer_default(unique)
	]
	interface IDataProxy : IDispatch
	{
		[id(1), helpstring("Execute a SQL String as fast as possible.")] HRESULT Execute([in] BSTR SQLString, [out, retval] long *Result);
		[id(2), helpstring("Construct the DB connection")] HRESULT ManualConstruct([in] BSTR ConstructString);
		[id(3), helpstring("Update the database using a given entity as it's source")] HRESULT EntityUpdate([in]IEntityData *Entity, [out, retval] long *Result);
		[id(4), helpstring("Load an entity from the database")] HRESULT EntityLoad([in] BSTR ReadStoredProc, [in] BSTR UpdateStoredProc, [in] BSTR DeleteStoredProc, [in] BSTR InsertStoredProc, [in] BSTR KeyField, [in] VARIANT KeyValue, [out, optional] long *Result, [out, retval] IEntityData **Entity);
		[id(5), helpstring("Query for a collection of entities")] HRESULT EntityQuery([in]BSTR SQLString, [out, optional] long * Result, [in, optional] BSTR ReadStoredProc, [in, optional] BSTR UpdateStoredProc, [in, optional] BSTR DeleteStoredProc, [in, optional] BSTR InsertStoredProc, [in, optional] BSTR KeyField, [out, retval] IResultset **Resultset);
		[id(6), helpstring("Query for an ADO Recordset and SP return value (int) - read only and disconnected")] HRESULT RSQuery([in] BSTR QueryText, [out, optional] VARIANT *Result, [out, retval] _Recordset ** Recordset);
		[id(7), helpstring("Query for an ADO Recordset and SP return value (int) - read/write and disconnected")] HRESULT RSQueryRW([in] BSTR QueryText, [out, optional] VARIANT *Result, [out, retval] _Recordset **rs);
		[id(8), helpstring("Update the database using the given ADO recordset as a source.")] HRESULT RSUpdate(_Recordset *rs);
		[id(9), helpstring("Retrieve an entity's data from the database")] HRESULT EntityRead([in] IEntityData *Entity, [out, retval] long *Results);
		[id(10), helpstring("Lookup entities - first found is returned. Use NextEntity for the rest.")] HRESULT EntityLookup([in]BSTR SQLString, [out, optional] long * Result, [in, optional] BSTR ReadStoredProc, [in, optional] BSTR UpdateStoredProc, [in, optional] BSTR DeleteStoredProc, [in, optional] BSTR InsertStoredProc, [in, optional] BSTR KeyField, [out, retval] IEntityData **Entity);
		[id(11), helpstring("Retrieve the next entity from the current lookup set.")] HRESULT NextEntity([out, retval] IEntityData **Entity);
		[id(12), helpstring("Free up resources used in the current entity lookup.")] HRESULT LookupFree();
		[id(13), helpstring("Delete the entity from the database.")] HRESULT EntityDelete([in] IEntityData *Entity, [out, retval] long *Result);
		[id(14), helpstring("Insert into the database using a given entity as it's source")] HRESULT EntityInsert(IEntityData *Entity, [out, retval] long *Result);
		[id(15), helpstring("Retrieve the next Resultset for the current query")] HRESULT NextResultset([out, optional] long * Result, [out, retval] IResultset **Resultset);
		[id(16), helpstring("Retrieve the first entity of the next set of results for the current lookup")] HRESULT NextLookup([out, optional] long *Result, [out, retval] IEntityData **Entity);
	};

	[
		uuid(0D515874-C926-4024-BD7F-D4F945F77FE7),
		helpstring("Entity Class")
	]
	coclass Entity
	{
		[default] interface IEntity;
		interface IEntityData;
	};
	[
		uuid(8BBDD465-4026-4529-97F4-4262A1878396),
		helpstring("Dynamic Class")
	]
	coclass Dynamic
	{
		[default] interface IDynamic;
	};

	[
		uuid(A814DCF9-1F97-45E3-84F3-42B5CF9F1EB0),
		helpstring("Proxy Class"),
		TRANSACTION_SUPPORTED
	]
	coclass Proxy
	{
		[default] interface IDataProxy;
	};
	[
		uuid(04263932-CE17-4D71-B841-8B514E778ADC),
		helpstring("Resultset Class")
	]
	coclass Resultset
	{
		[default] interface IResultset;
	};
};
